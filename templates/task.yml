Parameters:
  ServiceName:
    Type: String
  Version:
    Type: String
  Environment:
    Type: String
  ClusterName:
    Type: String
  VpcId:
    Type: String
  Subdomain:
    Type: String

Outputs:
  TaskFargate:
    Value: !Ref TaskFargate
    Description: task
  Sg:
    Value: !Ref SecurityGroup

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: load tester sg
      VpcId: !Ref VpcId

  LogsFargate:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${ServiceName}-${Environment}-fargate
      RetentionInDays: 7
  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      Path: '/'
      Policies:
        - PolicyName: bucket-policy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Put*
                  - s3:List*
                  - s3:Get*
                Resource:
                  - !Sub arn:aws:s3:::kloudcover
                  - !Sub arn:aws:s3:::kloudcover/*
  TaskFargate:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: test-load
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt Role.Arn
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ECSTaskExecution
      ContainerDefinitions:
        - Name: !Sub ${ServiceName}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/load-tester:${Version}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ServiceName}-${Environment}-fargate
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub ${ServiceName}
